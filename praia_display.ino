#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSerif12pt7b.h>

#define x 100

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Cole aqui <------

// 'frame_0_delay-0', 48x48px
const unsigned char Frame0 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x1f, 0xff, 0xff, 0xff, 0x8f, 0xc3, 0xff, 0xff, 0xff, 0xfe, 0x01, 0x84, 0x01, 0xff, 0xff, 
	0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xfc, 
	0x3f, 0xff, 0xff, 0x80, 0x00, 0x1f, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 
	0x24, 0x03, 0xff, 0xff, 0xfe, 0x10, 0xc7, 0xc1, 0xff, 0xff, 0xfe, 0x31, 0xc3, 0xe1, 0xff, 0xff, 
	0xfc, 0x63, 0xe5, 0xf1, 0xff, 0xff, 0xfc, 0xe3, 0xf4, 0xf9, 0xff, 0xff, 0xfd, 0xe7, 0xf2, 0x79, 
	0xff, 0xff, 0xff, 0xff, 0xfb, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xff, 
	0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0x7d, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0x3c, 0x9f, 0xff, 0xff, 
	0xff, 0xfc, 0x7c, 0x9f, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xdf, 
	0xff, 0xff, 0xff, 0xff, 0x1c, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x60, 0x07, 0xff, 0xff, 0xff, 0xf8, 
	0x02, 0xc0, 0x3f, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x87, 0xff, 0xff, 0x3f, 0x7f, 0xff, 0xf3, 0xff, 
	0xff, 0x7c, 0x3f, 0xff, 0xf9, 0xff, 0xfe, 0x79, 0xbf, 0xff, 0xfc, 0xff, 0xfe, 0xe3, 0xbf, 0xff, 
	0xfe, 0x7f, 0xfc, 0xff, 0xbf, 0xff, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 
	0xff, 0xff, 0xf9, 0x9f, 0xfb, 0xee, 0xff, 0x9c, 0xf1, 0xdf, 0xf8, 0xc0, 0x4f, 0x29, 0x76, 0xcf, 
	0xfa, 0x33, 0x00, 0x63, 0x27, 0x0f, 0xfa, 0x3f, 0xf3, 0xf7, 0x8f, 0xef, 0xfb, 0xbf, 0xff, 0xff, 
	0xff, 0xe7, 0xfb, 0x1f, 0x39, 0xf3, 0xff, 0xe3, 0xe6, 0x4c, 0xc2, 0x01, 0xc0, 0x03, 0xe8, 0xe1, 
	0xef, 0x1c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'frame_1_delay-0', 48x48px
const unsigned char Frame1 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x78, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x20, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x1c, 0x3f, 0xff, 0xff, 0x80, 
	0x02, 0x07, 0xff, 0xff, 0xff, 0x04, 0x0f, 0x03, 0xff, 0xff, 0xfe, 0x08, 0x47, 0xc1, 0xff, 0xff, 
	0xfe, 0x78, 0xe3, 0xf0, 0xff, 0xff, 0xff, 0x79, 0xe1, 0xf8, 0xff, 0xff, 0xff, 0xf9, 0xf0, 0xfe, 
	0xff, 0xff, 0xff, 0xfd, 0xfa, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0xbf, 0xff, 0xff, 
	0xff, 0xfc, 0x3e, 0xdf, 0xff, 0xff, 0xff, 0xfc, 0x3e, 0x5f, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0x4f, 
	0xff, 0xff, 0xff, 0xfe, 0x3e, 0x6f, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xc7, 0xff, 0xff, 0xff, 0xf9, 
	0x26, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0xff, 0x0f, 0xff, 0xff, 0xc8, 0x33, 0xff, 0xe3, 0xff, 
	0xff, 0x92, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0x3f, 0x7f, 0xff, 0xfd, 0xff, 0xff, 0x7f, 0x7f, 0xff, 
	0xfe, 0xff, 0xfe, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfd, 0xff, 
	0xff, 0xbf, 0xf1, 0x9f, 0xfd, 0x8c, 0xff, 0x1d, 0xf4, 0xcf, 0xf8, 0x20, 0x66, 0x48, 0x66, 0x4f, 
	0xf9, 0xf7, 0x91, 0xe3, 0x6f, 0x0f, 0xfb, 0xff, 0xff, 0xff, 0x8f, 0xe7, 0xfb, 0xff, 0xff, 0xff, 
	0xff, 0xf7, 0xfb, 0xe3, 0xff, 0xff, 0xff, 0xf7, 0xf8, 0x08, 0xe3, 0x9f, 0x18, 0x77, 0xe2, 0x7e, 
	0x08, 0x00, 0x43, 0x01, 0xef, 0xff, 0xff, 0xf9, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'frame_2_delay-0', 48x48px
const unsigned char Frame2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x60, 0x0f, 0xff, 0xff, 
	0xff, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x3f, 0xff, 0xff, 0xe0, 0x00, 0x7c, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x1f, 0x9f, 0xff, 0xff, 0x80, 
	0x00, 0x07, 0xcf, 0xff, 0xff, 0x00, 0x02, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x6b, 0x80, 0xff, 0xff, 
	0xfe, 0x88, 0xe5, 0xfe, 0xff, 0xff, 0xfe, 0x31, 0xf4, 0xff, 0xff, 0xff, 0xfe, 0x73, 0xf2, 0xff, 
	0xff, 0xff, 0xfe, 0xfb, 0xfb, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x3f, 0xff, 0xff, 0xff, 0xfe, 
	0x79, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0x3d, 0x9f, 0xff, 0xff, 0xff, 0xfc, 0x3d, 0xdf, 0xff, 0xff, 
	0xff, 0xfc, 0x7c, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xdf, 0xff, 0xff, 0xff, 0xfc, 0x7e, 0xdf, 
	0xff, 0xff, 0xff, 0xfc, 0x7e, 0xcf, 0xff, 0xff, 0xff, 0xfb, 0x3e, 0x4f, 0xff, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xc7, 0xff, 0xff, 0xcf, 0x1f, 0xff, 0xf3, 0xff, 
	0xff, 0xb8, 0x7f, 0xff, 0xf9, 0xff, 0xff, 0x26, 0x7f, 0xff, 0xfc, 0xff, 0xfe, 0x7e, 0x7f, 0xff, 
	0xfe, 0x7f, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0x5f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xf9, 0xff, 
	0xff, 0xff, 0xf7, 0x9f, 0xfb, 0x9f, 0xff, 0xfd, 0xe1, 0xcf, 0xf8, 0x8e, 0x6e, 0x38, 0xec, 0xcf, 
	0xf8, 0x74, 0x06, 0x92, 0x4e, 0x4f, 0xf1, 0x71, 0x90, 0xc7, 0x1f, 0x0f, 0xf1, 0xfb, 0xf9, 0xff, 
	0x9f, 0xef, 0xf0, 0x7f, 0xff, 0x9f, 0xcf, 0xef, 0xe1, 0x01, 0xff, 0x07, 0x31, 0xe3, 0xff, 0xcc, 
	0x06, 0x70, 0x7c, 0x0f, 0xff, 0xff, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 912)
const int FrameallArray_LEN = 3;
const unsigned char* FrameallArray[3] = {
	Frame0,
	Frame1,
	Frame2
};

void setup() {
  Serial.begin(115200);
 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000); // Pausa por 2 segundos
 
  // Limpa o display
  display.clearDisplay();
  
}
 
void loop() {
  // Desenha um bitmap na tela
  display.drawBitmap(40, 17, Frame0, 48, 48, 1); // Coordenada X, coordenada Y, nome da imagem, 
                            // tamanho na coordenada x, tamanho na coordenada y, nome do arquivo bitmap (sempre 1)
  display.display();
  delay(x);
  display.clearDisplay();

  display.drawBitmap(40, 17, Frame1, 48, 48, 1); // Coordenada X, coordenada Y, nome da imagem, 
                            // tamanho na coordenada x, tamanho na coordenada y, nome do arquivo bitmap (sempre 1)
  display.display();
  delay(x);
  display.clearDisplay();

  display.drawBitmap(40, 17, Frame2, 48, 48, 1); // Coordenada X, coordenada Y, nome da imagem, 
                            // tamanho na coordenada x, tamanho na coordenada y, nome do arquivo bitmap (sempre 1)
  display.display();
  delay(x);
  display.clearDisplay();

 
  
}